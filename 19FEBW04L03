#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int singleNonDuplicate(vector<int> &nums)
{
    int s = 0;
    int e = nums.size() - 1;
    int mid = s + (e - s) / 2;
    while (s <= e)
    {
        // if not found and u want to return -1, then use s<=e in while loop along with the below code:
        if (s == e)
        {
            return s;
        }
        if (mid % 2 == 0)

        {

            if (nums[mid] == nums[mid + 1])
            {
                s = mid + 2;
            }
            else
            {
                e = mid;
            }
        }
        else
        {
            if (nums[mid - 1] == nums[mid])
            {
                s = mid + 1;
            }
            else
            {
                e = mid - 1;
            }
        }
        mid = s + (e - s) / 2;
    }
    return -1; // and return -1, if you follow the commented instruction
}
int main()
{
    vector<int> nums{1, 1, 2, 2, 3, 3, 4, 4, 3, 600, 600, 4, 4};
    cout << singleNonDuplicate(nums);
}
